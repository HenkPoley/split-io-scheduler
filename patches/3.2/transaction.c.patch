Index: linux-3.2/fs/jbd2/transaction.c
===================================================================
--- linux-3.2.orig/fs/jbd2/transaction.c	2016-04-25 11:05:05.843218986 +0200
+++ linux-3.2/fs/jbd2/transaction.c	2016-04-25 11:05:05.836552320 +0200
@@ -29,10 +29,19 @@
 #include <linux/backing-dev.h>
 #include <linux/bug.h>
 #include <linux/module.h>
+#include <linux/kthread.h>
+#include <linux/cause_tags.h>
+
 
 static void __jbd2_journal_temp_unlink_buffer(struct journal_head *jh);
 static void __jbd2_journal_unfile_buffer(struct journal_head *jh);
 
+void jbd2_free_transaction(transaction_t *transaction) {
+	if (transaction)
+		put_cause_list(transaction->causes);
+	kfree(transaction);
+}
+
 /*
  * jbd2_get_transaction: obtain a new transaction_t object.
  *
@@ -72,6 +81,8 @@
 	transaction->t_max_wait = 0;
 	transaction->t_start = jiffies;
 
+	transaction->causes = new_cause_list();
+
 	return transaction;
 }
 
@@ -162,7 +173,7 @@
 	if (is_journal_aborted(journal) ||
 	    (journal->j_errno != 0 && !(journal->j_flags & JBD2_ACK_ERR))) {
 		read_unlock(&journal->j_state_lock);
-		kfree(new_transaction);
+		jbd2_free_transaction(new_transaction);
 		return -EROFS;
 	}
 
@@ -284,7 +295,7 @@
 	read_unlock(&journal->j_state_lock);
 
 	lock_map_acquire(&handle->h_lockdep_map);
-	kfree(new_transaction);
+	jbd2_free_transaction(new_transaction);
 	return 0;
 }
 
@@ -1094,6 +1105,21 @@
 		handle->h_buffer_credits--;
 	}
 
+	cause_list_add(&transaction->causes, current);
+	cause_list_add(&jh->causes, current);
+
+	/*
+	if(current->causes){
+		struct io_cause *cause;
+		list_for_each_entry(cause, &current->causes->items, list){
+			printk("bh: %p add cause %d\n", bh, cause->account_id);
+		}
+
+	}else{
+		printk("bh: %p add cause %d\n", current->account_id);
+	}
+	*/
+
 	/*
 	 * fastpath, to avoid expensive locking.  If this buffer is already
 	 * on the running transaction's metadata list there is nothing to do.
@@ -1384,6 +1410,8 @@
 	 * writes.  No point in waiting for joiners in that case.
 	 */
 	pid = current->pid;
+	
+#ifndef SPLIT_NODEP
 	if (handle->h_sync && journal->j_last_sync_writer != pid) {
 		u64 commit_time, trans_time;
 
@@ -1408,6 +1436,7 @@
 			schedule_hrtimeout(&expires, HRTIMER_MODE_ABS);
 		}
 	}
+#endif
 
 	if (handle->h_sync)
 		transaction->t_synchronous_commit = 1;
@@ -2048,6 +2077,21 @@
 		J_ASSERT_JH(jh, !jh->b_frozen_data);
 		return;
 	case BJ_Metadata:
+#ifndef DISABLE_CAUSES
+		// don't blame ourselves for things like commit records, even
+		// though we write them!  This should be blamed on the processes
+		// that added records to start with.  Do this by checking if the
+		// thread is associated with the jbd2 journal.
+		/*
+		if (current->flags&PF_KTHREAD &&
+			kthread_data(current) == transaction->t_journal) {
+			// skip
+		} else {
+			cause_list_add(&transaction->causes, current);
+		}
+		*/
+#endif
+
 		transaction->t_nr_buffers++;
 		list = &transaction->t_buffers;
 		break;
