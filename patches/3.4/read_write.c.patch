Index: linux-3.4/fs/read_write.c
===================================================================
--- linux-3.4.orig/fs/read_write.c	2016-04-25 14:32:16.961369276 +0200
+++ linux-3.4/fs/read_write.c	2016-04-25 14:33:58.271366148 +0200
@@ -15,6 +15,8 @@
 #include <linux/syscalls.h>
 #include <linux/pagemap.h>
 #include <linux/splice.h>
+#include <linux/module.h>
+#include <linux/blkdev.h>
 #include "read_write.h"
 
 #include <asm/uaccess.h>
@@ -419,6 +421,10 @@
 
 ssize_t vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)
 {
+	struct request_queue* rq;
+	struct elevator_syscall_ops sops;
+	struct module* module;
+	void* opaque = NULL;
 	ssize_t ret;
 
 	if (!(file->f_mode & FMODE_WRITE))
@@ -428,6 +434,17 @@
 	if (unlikely(!access_ok(VERIFY_READ, buf, count)))
 		return -EFAULT;
 
+	// intercept entry
+	get_elevator_call_info(file, &rq, &module, &sops);
+	if (sops.write_entry_fn) {
+		ret = sops.write_entry_fn(rq, file, count, pos, &opaque, sops.sched_uniq);
+		if (ret) {
+			BUG_ON(!module);
+			module_put(module);
+			return ret;
+		}
+	}
+
 	ret = rw_verify_area(WRITE, file, pos, count);
 	if (ret >= 0) {
 		count = ret;
@@ -442,6 +459,12 @@
 		inc_syscw(current);
 	}
 
+	// intercept exit
+	if (sops.write_return_fn)
+		sops.write_return_fn(rq, opaque, ret, sops.sched_uniq);
+	if (module)
+		module_put(module);
+
 	return ret;
 }
 
