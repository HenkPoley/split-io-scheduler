--- linux-3.2.51/fs/jbd2/commit.c	2013-09-10 02:57:42.000000000 +0200
+++ ../split-release/release/linux-3.2.51/fs/jbd2/commit.c	2015-09-01 05:42:48.000000000 +0200
@@ -29,6 +29,9 @@
 #include <linux/bitops.h>
 #include <trace/events/jbd2.h>
 #include <asm/system.h>
+#include <linux/cause_tags.h>
+
+#define SPLIT_DEBUG
 
 /*
  * Default IO end handler for temporary BJ_IO buffer_heads.
@@ -97,7 +100,8 @@
 static int journal_submit_commit_record(journal_t *journal,
 					transaction_t *commit_transaction,
 					struct buffer_head **cbh,
-					__u32 crc32_sum)
+					__u32 crc32_sum,
+					struct cause_list* cause_list)
 {
 	struct journal_head *descriptor;
 	struct commit_header *tmp;
@@ -115,6 +119,7 @@
 		return 1;
 
 	bh = jh2bh(descriptor);
+	bh->causes = get_cause_list(cause_list);
 
 	tmp = (struct commit_header *)bh->b_data;
 	tmp->h_magic = cpu_to_be32(JBD2_MAGIC_NUMBER);
@@ -173,6 +178,9 @@
  * use writepages() because with dealyed allocation we may be doing
  * block allocation in writepages().
  */
+#ifdef SPLIT_DEBUG
+static int is_on_sdb(struct super_block *sb);
+#endif
 static int journal_submit_inode_data_buffers(struct address_space *mapping)
 {
 	int ret;
@@ -232,6 +240,11 @@
  * transaction if needed.
  *
  */
+#ifdef SPLIT_DEBUG
+static inline int get_time_diff(struct timeval *end, struct timeval *start){
+	return (end->tv_sec - start->tv_sec) * 1000 + (end->tv_usec - start->tv_usec) / 1000;
+}
+#endif
 static int journal_finish_inode_data_buffers(journal_t *journal,
 		transaction_t *commit_transaction)
 {
@@ -302,6 +315,22 @@
 		tag->t_blocknr_high = cpu_to_be32((block >> 31) >> 1);
 }
 
+#ifdef SPLIT_DEBUG
+static int is_on_sdb(struct super_block *sb){
+	if(!sb)
+		return 0;
+	if(!sb->s_bdev)
+		return 0;
+	if(!sb->s_bdev->bd_disk)
+		return 0;
+	if(!sb->s_bdev->bd_disk->disk_name)
+		return 0;
+	if(strcmp(sb->s_bdev->bd_disk->disk_name, "sdf") == 0)
+		return 1;
+	return 0;
+}
+#endif
+
 /*
  * jbd2_journal_commit_transaction
  *
@@ -331,6 +360,11 @@
 	struct buffer_head *cbh = NULL; /* For transactional checksums */
 	__u32 crc32_sum = ~0;
 	struct blk_plug plug;
+	struct cause_list* cause_list = NULL;
+#ifdef SPLIT_DEBUG
+	struct super_block *sb = journal->j_private;
+	struct timeval wait_start, wait_end;
+#endif
 
 	/*
 	 * First job: lock down the current transaction and wait for
@@ -364,7 +398,14 @@
 	stats.run.rs_running = jbd2_time_diff(commit_transaction->t_start,
 					      stats.run.rs_locked);
 
+#ifdef SPLIT_DEBUG
+	do_gettimeofday(&wait_start);
+#endif
 	spin_lock(&commit_transaction->t_handle_lock);
+
+	cause_list = get_cause_list(commit_transaction->causes);
+	set_cause_list_type(cause_list, SPLIT_JOURNAL);
+
 	while (atomic_read(&commit_transaction->t_updates)) {
 		DEFINE_WAIT(wait);
 
@@ -380,6 +421,14 @@
 		finish_wait(&journal->j_wait_updates, &wait);
 	}
 	spin_unlock(&commit_transaction->t_handle_lock);
+#ifdef SPLIT_DEBUG
+	do_gettimeofday(&wait_end);
+	
+	if(is_on_sdb(sb) && get_time_diff(&wait_end, &wait_start) >= 10){
+		printk("yangsuli: j_wait_updates take %d ms\n",get_time_diff(&wait_end, &wait_start)); 
+	}
+#endif
+
 
 	J_ASSERT (atomic_read(&commit_transaction->t_outstanding_credits) <=
 			journal->j_max_transaction_buffers);
@@ -459,7 +508,7 @@
 
 	blk_start_plug(&plug);
 	jbd2_journal_write_revoke_records(journal, commit_transaction,
-					  WRITE_SYNC);
+					  WRITE_SYNC, cause_list);
 	blk_finish_plug(&plug);
 
 	jbd_debug(3, "JBD2: commit phase 2\n");
@@ -595,6 +645,9 @@
 		}
 		set_bit(BH_JWrite, &jh2bh(new_jh)->b_state);
 		wbuf[bufs++] = jh2bh(new_jh);
+		(jh2bh(new_jh))->causes = jh->causes;
+		jh->causes = NULL;
+		set_cause_list_type((jh2bh(new_jh))->causes, SPLIT_JOURNAL_META);
 
 		/* Record the new block's tag in the current descriptor
                    buffer */
@@ -636,6 +689,8 @@
 start_journal_io:
 			for (i = 0; i < bufs; i++) {
 				struct buffer_head *bh = wbuf[i];
+				//bh->causes = get_cause_list(cause_list); // new ref
+
 				/*
 				 * Compute checksum.
 				 */
@@ -651,6 +706,13 @@
 				bh->b_end_io = journal_end_buffer_io_sync;
 				submit_bh(WRITE_SYNC, bh);
 			}
+			
+#ifdef SPLIT_DEBUG
+			if(is_on_sdb(sb)){
+				//printk("yangsuli: submit %d journal metadata blocks + 1 descriptor block for transaction %d\n", bufs, commit_transaction->t_tid);
+			}
+#endif
+		
 			cond_resched();
 			stats.run.rs_blocks_logged += bufs;
 
@@ -689,7 +751,7 @@
 	if (JBD2_HAS_INCOMPAT_FEATURE(journal,
 				      JBD2_FEATURE_INCOMPAT_ASYNC_COMMIT)) {
 		err = journal_submit_commit_record(journal, commit_transaction,
-						 &cbh, crc32_sum);
+						 &cbh, crc32_sum, cause_list);
 		if (err)
 			__jbd2_journal_abort_hard(journal);
 	}
@@ -810,17 +872,37 @@
 	if (!JBD2_HAS_INCOMPAT_FEATURE(journal,
 				       JBD2_FEATURE_INCOMPAT_ASYNC_COMMIT)) {
 		err = journal_submit_commit_record(journal, commit_transaction,
-						&cbh, crc32_sum);
+						&cbh, crc32_sum, cause_list);
 		if (err)
 			__jbd2_journal_abort_hard(journal);
 	}
+
+
+#ifdef SPLIT_DEBUG
+	do_gettimeofday(&wait_start);
+#endif
 	if (cbh)
 		err = journal_wait_on_commit_record(journal, cbh);
+#ifdef SPLIT_DEBUG
+	do_gettimeofday(&wait_end);
+	if(is_on_sdb(sb) && get_time_diff(&wait_end, &wait_start) >= 10){
+		printk("yangsuli: journal_wait_on_commit_record take %d ms\n",get_time_diff(&wait_end, &wait_start)); 
+	}
+
+
+	do_gettimeofday(&wait_start);
+#endif
 	if (JBD2_HAS_INCOMPAT_FEATURE(journal,
 				      JBD2_FEATURE_INCOMPAT_ASYNC_COMMIT) &&
 	    journal->j_flags & JBD2_BARRIER) {
 		blkdev_issue_flush(journal->j_dev, GFP_NOFS, NULL);
 	}
+#ifdef SPLIT_DEBUG
+	do_gettimeofday(&wait_end);
+	if(is_on_sdb(sb) && get_time_diff(&wait_end, &wait_start) >= 10){
+		printk("yangsuli: journal_blkdev_issue_flush take %d ms\n",get_time_diff(&wait_end, &wait_start)); 
+	}
+#endif
 
 	if (err)
 		jbd2_journal_abort(journal, err);
@@ -1046,9 +1128,12 @@
 	if (commit_transaction->t_checkpoint_list == NULL &&
 	    commit_transaction->t_checkpoint_io_list == NULL) {
 		__jbd2_journal_drop_transaction(journal, commit_transaction);
-		kfree(commit_transaction);
+		jbd2_free_transaction(commit_transaction);
 	}
 	spin_unlock(&journal->j_list_lock);
 	write_unlock(&journal->j_state_lock);
 	wake_up(&journal->j_wait_done_commit);
+
+	put_cause_list(cause_list);
+
 }
diff -rubBN linux-3.2.51/fs/jbd2/journal.c ../split-release/release/linux-3.2.51/fs/jbd2/journal.c
