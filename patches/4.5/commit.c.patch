Index: linux-4.5/fs/jbd2/commit.c
===================================================================
--- linux-4.5.orig/fs/jbd2/commit.c	2016-04-27 15:37:09.242438463 +0200
+++ linux-4.5/fs/jbd2/commit.c	2016-04-27 19:43:43.868431207 +0200
@@ -28,6 +28,9 @@
 #include <linux/blkdev.h>
 #include <linux/bitops.h>
 #include <trace/events/jbd2.h>
+#include <linux/cause_tags.h>
+
+#define SPLIT_DEBUG
 
 /*
  * IO end handler for temporary buffer_heads handling writes to the journal.
@@ -119,7 +122,8 @@
 static int journal_submit_commit_record(journal_t *journal,
 					transaction_t *commit_transaction,
 					struct buffer_head **cbh,
-					__u32 crc32_sum)
+					__u32 crc32_sum,
+					struct cause_list *cause_list)
 {
 	struct commit_header *tmp;
 	struct buffer_head *bh;
@@ -135,6 +139,8 @@
 	if (!bh)
 		return 1;
 
+	bh->causes = get_cause_list(cause_list);
+
 	tmp = (struct commit_header *)bh->b_data;
 	tmp->h_magic = cpu_to_be32(JBD2_MAGIC_NUMBER);
 	tmp->h_blocktype = cpu_to_be32(JBD2_COMMIT_BLOCK);
@@ -249,6 +255,13 @@
  * transaction if needed.
  *
  */
+#ifdef SPLIT_DEBUG
+static inline int get_time_diff(struct timeval *end, struct timeval *start)
+{
+	return (end->tv_sec - start->tv_sec) * 1000 +
+		(end->tv_usec - start->tv_usec) / 1000;
+}
+#endif
 static int journal_finish_inode_data_buffers(journal_t *journal,
 		transaction_t *commit_transaction)
 {
@@ -319,6 +332,24 @@
 		tag->t_blocknr_high = cpu_to_be32((block >> 31) >> 1);
 }
 
+#ifdef SPLIT_DEBUG
+static int is_on_sdb(struct super_block *sb);
+static int is_on_sdb(struct super_block *sb)
+{
+	if (!sb)
+		return 0;
+	if (!sb->s_bdev)
+		return 0;
+	if (!sb->s_bdev->bd_disk)
+		return 0;
+	if (!sb->s_bdev->bd_disk->disk_name)
+		return 0;
+	if (strcmp(sb->s_bdev->bd_disk->disk_name, "sdf") == 0)
+		return 1;
+	return 0;
+}
+#endif
+
 static void jbd2_descr_block_csum_set(journal_t *j,
 				      struct buffer_head *bh)
 {
@@ -396,6 +427,11 @@
 	int csum_size = 0;
 	LIST_HEAD(io_bufs);
 	LIST_HEAD(log_bufs);
+	struct cause_list *cause_list = NULL;
+#ifdef SPLIT_DEBUG
+	struct super_block *sb = journal->j_private;
+	struct timeval wait_start, wait_end;
+#endif
 
 	if (jbd2_journal_has_csum_v2or3(journal))
 		csum_size = sizeof(struct jbd2_journal_block_tail);
@@ -448,7 +484,14 @@
 	stats.run.rs_running = jbd2_time_diff(commit_transaction->t_start,
 					      stats.run.rs_locked);
 
+#ifdef SPLIT_DEBUG
+	do_gettimeofday(&wait_start);
+#endif
 	spin_lock(&commit_transaction->t_handle_lock);
+
+	cause_list = get_cause_list(commit_transaction->causes);
+	set_cause_list_type(cause_list, SPLIT_JOURNAL);
+
 	while (atomic_read(&commit_transaction->t_updates)) {
 		DEFINE_WAIT(wait);
 
@@ -464,6 +507,15 @@
 		finish_wait(&journal->j_wait_updates, &wait);
 	}
 	spin_unlock(&commit_transaction->t_handle_lock);
+#ifdef SPLIT_DEBUG
+	do_gettimeofday(&wait_end);
+
+	if (is_on_sdb(sb) && get_time_diff(&wait_end, &wait_start) >= 10) {
+		printk(KERN_INFO "yangsuli: j_wait_updates take %d ms\n",
+			   get_time_diff(&wait_end, &wait_start));
+	}
+#endif
+
 
 	J_ASSERT (atomic_read(&commit_transaction->t_outstanding_credits) <=
 			journal->j_max_transaction_buffers);
@@ -555,7 +607,7 @@
 
 	blk_start_plug(&plug);
 	jbd2_journal_write_revoke_records(journal, commit_transaction,
-					  &log_bufs, WRITE_SYNC);
+					  &log_bufs, WRITE_SYNC, cause_list);
 
 	jbd_debug(3, "JBD2: commit phase 2b\n");
 
@@ -681,6 +733,17 @@
 		}
 		jbd2_file_log_bh(&io_bufs, wbuf[bufs]);
 
+		/* Looks like the split journal was removed with this patch:
+		 *  https://patchwork.ozlabs.org/patch/234919/
+		 * Do we need to set a different cause now ???
+		 */
+
+		/* (jh2bh(wbuf[bufs]))->causes = jh->causes;
+		 * jh->causes = NULL;
+		 * set_cause_list_type((jh2bh(wbuf[bufs]))->causes,
+		 *     SPLIT_JOURNAL_META);
+		 */
+
 		/* Record the new block's tag in the current descriptor
                    buffer */
 
@@ -725,6 +788,7 @@
 start_journal_io:
 			for (i = 0; i < bufs; i++) {
 				struct buffer_head *bh = wbuf[i];
+
 				/*
 				 * Compute checksum.
 				 */
@@ -739,6 +803,7 @@
 				bh->b_end_io = journal_end_buffer_io_sync;
 				submit_bh(WRITE_SYNC, bh);
 			}
+
 			cond_resched();
 			stats.run.rs_blocks_logged += bufs;
 
@@ -796,7 +861,7 @@
 	/* Done it all: now write the commit record asynchronously. */
 	if (jbd2_has_feature_async_commit(journal)) {
 		err = journal_submit_commit_record(journal, commit_transaction,
-						 &cbh, crc32_sum);
+						 &cbh, crc32_sum, cause_list);
 		if (err)
 			__jbd2_journal_abort_hard(journal);
 	}
@@ -887,16 +952,36 @@
 
 	if (!jbd2_has_feature_async_commit(journal)) {
 		err = journal_submit_commit_record(journal, commit_transaction,
-						&cbh, crc32_sum);
+						&cbh, crc32_sum, cause_list);
 		if (err)
 			__jbd2_journal_abort_hard(journal);
 	}
+
+#ifdef SPLIT_DEBUG
+	do_gettimeofday(&wait_start);
+#endif
 	if (cbh)
 		err = journal_wait_on_commit_record(journal, cbh);
+#ifdef SPLIT_DEBUG
+	do_gettimeofday(&wait_end);
+	if (is_on_sdb(sb) && get_time_diff(&wait_end, &wait_start) >= 10) {
+		printk(KERN_INFO "yangsuli: journal_wait_on_commit_record take %d ms\n",
+			   get_time_diff(&wait_end, &wait_start));
+	}
+
+	do_gettimeofday(&wait_start);
+#endif
 	if (jbd2_has_feature_async_commit(journal) &&
 	    journal->j_flags & JBD2_BARRIER) {
 		blkdev_issue_flush(journal->j_dev, GFP_NOFS, NULL);
 	}
+#ifdef SPLIT_DEBUG
+	do_gettimeofday(&wait_end);
+	if (is_on_sdb(sb) && get_time_diff(&wait_end, &wait_start) >= 10) {
+		printk(KERN_INFO "yangsuli: journal_blkdev_issue_flush take %d ms\n",
+			   get_time_diff(&wait_end, &wait_start));
+	}
+#endif
 
 	if (err)
 		jbd2_journal_abort(journal, err);
@@ -1139,6 +1224,8 @@
 	write_unlock(&journal->j_state_lock);
 	wake_up(&journal->j_wait_done_commit);
 
+	put_cause_list(cause_list);
+
 	/*
 	 * Calculate overall stats
 	 */
