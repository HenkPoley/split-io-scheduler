Index: linux-4.5/block/cfq-iosched.c
===================================================================
--- linux-4.5.orig/block/cfq-iosched.c	2016-04-27 15:37:09.179105131 +0200
+++ linux-4.5/block/cfq-iosched.c	2016-04-27 18:49:35.275215213 +0200
@@ -390,6 +390,11 @@
 	struct cfq_queue oom_cfqq;
 
 	unsigned long last_delayed_sync;
+
+	/*
+	 * yangsuli added tracing facility
+	 */
+	int prio_served_rqs[IOPRIO_BE_NR];
 };
 
 static struct cfq_group *cfq_get_next_cfqg(struct cfq_data *cfqd);
@@ -3483,6 +3488,8 @@
 	 */
 	cfq_dispatch_insert(cfqd->queue, rq);
 
+	cfqd->prio_served_rqs[cfqq->ioprio]++;
+
 	if (!cfqd->active_cic) {
 		struct cfq_io_cq *cic = RQ_CIC(rq);
 
@@ -4475,6 +4482,11 @@
 {
 	struct cfq_data *cfqd = e->elevator_data;
 	struct request_queue *q = cfqd->queue;
+	int i;
+
+	for (i = 0; i < IOPRIO_BE_NR; i++)
+		fs_info(fsdev, "cfq prio: %d req_num: %d\n", i,
+				cfqd->prio_served_rqs[i]);
 
 	cfq_shutdown_timer_wq(cfqd);
 
@@ -4580,8 +4592,12 @@
 	cfqd->cfq_slice_async_rq = cfq_slice_async_rq;
 	cfqd->cfq_slice_idle = cfq_slice_idle;
 	cfqd->cfq_group_idle = cfq_group_idle;
-	cfqd->cfq_latency = 1;
+	cfqd->cfq_latency = 0;
 	cfqd->hw_tag = -1;
+
+	for (i = 0; i < IOPRIO_BE_NR; i++)
+		cfqd->prio_served_rqs[i] = 0;
+
 	/*
 	 * we optimistically start assuming sync ops weren't delayed in last
 	 * second, in order to have larger depth for async operations.
